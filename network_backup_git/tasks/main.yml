---
# create the backup folder if it doesn't exist
  # - name: create git repo folder
  #   become: True
  #   run_once: true
  #   delegate_to: backup-server
  #   file:
  #     path: "{{ backup_dir }}"
  #     state: directory
  #     mode: '0777'

- name: ensure EE projects directory exists
  git: 
    repo: https://github.com/mkbredem/net_backups.git
    dest: /opt/
  delegate_to: backup-server

# tasks file for network_backup_git
  # - name: make sure the git repo is up to date/exists on backup-server
  #   delegate_to: backup-server
  #   run_once: True
  #   become: True
  #   git:
  #     repo: "{{ backup_repo }}"
  #     dest: "{{ backup_dir }}"
  #     update: yes

  - name: include cisco task when Cisco device
    include_tasks: "{{ role_path }}/tasks/network_backup_cisco.yml"
#    include_tasks: "{{ playbook_dir }}/network_backup_cisco.yml"
    when: ansible_network_os == "asa" or ansible_network_os == "ios" or ansible_network_os == "nxos"

  - name: include arista task when Arista device
    include_tasks: "{{ role_path }}/tasks/network_backup_arista.yml"
#    include_tasks: "{{ playbook_dir }}/network_backup_arista.yml"
    when: ansible_network_os == "eos"

  - name: include junos task when Junos device
    include_tasks: "{{ role_path }}/tasks/network_backup_juniper.yml"
#    include_tasks: "{{ playbook_dir }}/network_backup_juniper.yml"
    when: ansible_network_os == "junos"

  - name: include routeros task when Mikrotik device
    include_tasks: "{{ role_path }}/tasks/network_backup_mikrotik.yml"
#    include_tasks: "{{ playbook_dir }}/network_backup_mikrotik.yml"
    when: ansible_network_os == "routeros"

  - name: Copy the backup to repo
    copy:
      src: "{{ bup_temp_file }}"
      dest: "{{ backup_file }}"
      remote_src: yes
    register: copy_result
    delegate_to: backup-server

  - name: Delete the temp file
    file:
      path: "{{ bup_temp_file }}"
      state: absent
    changed_when: False
    delegate_to: backup-server

  - name: get timestamp
    set_fact: time="{{lookup('pipe','date \"+%Y-%m-%d-%H-%M\"')}}"
    run_once: true
    delegate_to: backup-server

  - name: Add any new backups to the repository - ignore key checking
#    shell: "git add *; git commit -m '{{ time }}'; git push"
    shell: "git add *; git commit -m '{{ time }}'; git config --global core.sshCommand 'ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no'; git push"
    delegate_to: backup-server

    args:
      chdir: "{{ backup_dir }}"
    environment:
      GIT_COMMITTER_NAME: "{{ git_name | default(omit) }}"
      GIT_COMMITTER_EMAIL: "{{ git_email | default(omit) }}"
      GIT_AUTHOR_NAME: "{{ git_name | default(omit) }}"
      GIT_AUTHOR_EMAIL: "{{ git_email | default(omit) }}"
    delegate_to: backup-server
    changed_when: git_return.stderr != "Everything up-to-date"
    run_once: true
    connection: local
    register: git_return
    become: True
